;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.3 Standard
;Automatic Program Generator
;© Copyright 1998-2011 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 4/30/2019
;Author  : admin
;Company : IUST
;Comments:
;
;
;Chip type               : ATmega1280
;Program type            : Application
;AVR Core Clock frequency: 11.059200 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 2048
;*****************************************************/
;
;#include <mega1280.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <string.h>
;
;// Alphanumeric LCD functions
;#include <alcd.h>
;
;#ifndef RXB8
;#define RXB8 1
;#endif
;
;#ifndef TXB8
;#define TXB8 0
;#endif
;
;#ifndef UPE
;#define UPE 2
;#endif
;
;#ifndef DOR
;#define DOR 3
;#endif
;
;#ifndef FE
;#define FE 4
;#endif
;
;#ifndef UDRE
;#define UDRE 5
;#endif
;
;#ifndef RXC
;#define RXC 7
;#endif
;
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;
;// Get a character from the USART2 Receiver
;#pragma used+
;char getchar2(void)
; 0000 0043 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0044 char status,data;
; 0000 0045 while (1)
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000011 VOL: 0
; 0000 0046       {
; 0000 0047       while (((status=UCSR2A) & RX_COMPLETE)==0);
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0048       data=UDR2;
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0049       if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 004A          return data;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 004B       }
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 004C }
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;#pragma used-
;
;// Write a character to the USART2 Transmitter
;#pragma used+
;void putchar2(char c)
; 0000 0052 {
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0053 while ((UCSR2A & DATA_REGISTER_EMPTY)==0);
;PCODE: $00000029 VOL: 0
;	c -> Y+0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 0054 UDR2=c;
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0055 }
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;#pragma used-
;
;// Declare your global variables here
;
;int x = 0;
;int y =0;
;
;void updatePos(int flag)
; 0000 005E {
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 005F     if (flag) {
;PCODE: $00000037 VOL: 0
;	flag -> Y+0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0060         if(1 + x > 15) {
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0061             if (y == 1) {
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 0062                 lcd_clear();
;PCODE: $00000042 VOL: 0
; 0000 0063                 x = 0;
;PCODE: $00000043 VOL: 0
; 0000 0064                 y = 0;
;PCODE: $00000044 VOL: 0
; 0000 0065                 return ;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0066             }
; 0000 0067             y = 1;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0068             x = 0;
;PCODE: $0000004A VOL: 0
; 0000 0069         }
; 0000 006A         else {
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 006B                 x ++;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 006C         }
;PCODE: $00000050 VOL: 0
; 0000 006D     } else {
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 006E         if(x == 0) {
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 006F             if (y == 1) {
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 0070                 y = 0;
;PCODE: $00000058 VOL: 0
; 0000 0071                 x = 15;
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0072             }
; 0000 0073         } else{
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 0074             x --;
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0075         }
;PCODE: $00000061 VOL: 0
; 0000 0076 
; 0000 0077 
; 0000 0078 
; 0000 0079     }
;PCODE: $00000062 VOL: 0
; 0000 007A 
; 0000 007B }
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;
;
;
;
;void main(void)
; 0000 0081 {
;PCODE: $00000066 VOL: 0
; 0000 0082 char b;
; 0000 0083 int i;
; 0000 0084 
; 0000 0085 // Declare your local variables here
; 0000 0086 
; 0000 0087 // Crystal Oscillator division factor: 1
; 0000 0088 #pragma optsize-
; 0000 0089 CLKPR=0x80;
;	b -> R17
;	i -> R18,R19
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 008A CLKPR=0x00;
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 008B #ifdef _OPTIMIZE_SIZE_
; 0000 008C #pragma optsize+
; 0000 008D #endif
; 0000 008E 
; 0000 008F // Input/Output Ports initialization
; 0000 0090 // Port A initialization
; 0000 0091 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0092 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0093 PORTA=0x00;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0094 DDRA=0x00;
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 0095 
; 0000 0096 // Port B initialization
; 0000 0097 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0098 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0099 PORTB=0x00;
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 009A DDRB=0x00;
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 009B 
; 0000 009C // Port C initialization
; 0000 009D // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 009E // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 009F PORTC=0x00;
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 00A0 DDRC=0x00;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 00A1 
; 0000 00A2 // Port D initialization
; 0000 00A3 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 00A4 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 00A5 PORTD=0x00;
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 00A6 DDRD=0x00;
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 00A7 
; 0000 00A8 // Port E initialization
; 0000 00A9 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 00AA // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 00AB PORTE=0x00;
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 00AC DDRE=0x00;
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 00AD 
; 0000 00AE // Port F initialization
; 0000 00AF // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 00B0 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 00B1 PORTF=0x00;
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 00B2 DDRF=0x00;
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 00B3 
; 0000 00B4 // Port G initialization
; 0000 00B5 // Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 00B6 // State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 00B7 PORTG=0x00;
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 00B8 DDRG=0x00;
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 00B9 
; 0000 00BA // Port H initialization
; 0000 00BB // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 00BC // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 00BD PORTH=0x00;
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 00BE DDRH=0x00;
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 00BF 
; 0000 00C0 // Port J initialization
; 0000 00C1 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 00C2 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 00C3 PORTJ=0x00;
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 00C4 DDRJ=0x00;
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 00C5 
; 0000 00C6 // Port K initialization
; 0000 00C7 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 00C8 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 00C9 PORTK=0x00;
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 00CA DDRK=0x00;
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 00CB 
; 0000 00CC // Port L initialization
; 0000 00CD // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 00CE // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 00CF PORTL=0x00;
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 00D0 DDRL=0x00;
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 00D1 
; 0000 00D2 // USART2 initialization
; 0000 00D3 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 00D4 // USART2 Receiver: On
; 0000 00D5 // USART2 Transmitter: On
; 0000 00D6 // USART2 Mode: Asynchronous
; 0000 00D7 // USART2 Baud Rate: 9600
; 0000 00D8 UCSR2A=0x00;
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 00D9 UCSR2B=0x18;
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 00DA UCSR2C=0x06;
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 00DB UBRR2H=0x00;
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 00DC UBRR2L=0x47;
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 00DD 
; 0000 00DE // Alphanumeric LCD initialization
; 0000 00DF // Connections are specified in the
; 0000 00E0 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 00E1 // RS - PORTA Bit 0
; 0000 00E2 // RD - PORTA Bit 1
; 0000 00E3 // EN - PORTA Bit 2
; 0000 00E4 // D4 - PORTA Bit 4
; 0000 00E5 // D5 - PORTA Bit 5
; 0000 00E6 // D6 - PORTA Bit 6
; 0000 00E7 // D7 - PORTA Bit 7
; 0000 00E8 // Characters/line: 16
; 0000 00E9 
; 0000 00EA lcd_init(16);
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 00EB lcd_clear();
;PCODE: $000000A3 VOL: 0
; 0000 00EC while (1)
;PCODE: $000000A4 VOL: 0
; 0000 00ED       {
; 0000 00EE       b = getchar2();
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 00EF 
; 0000 00F0       if (b == 'c')
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 00F1       {
; 0000 00F2         x = 0;
;PCODE: $000000AA VOL: 0
; 0000 00F3         y = 0;
;PCODE: $000000AB VOL: 0
; 0000 00F4         lcd_clear();
;PCODE: $000000AC VOL: 0
; 0000 00F5       }
; 0000 00F6       else if (b == 'n')
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 00F7       {
; 0000 00F8         char * name = "saeed & amir";
; 0000 00F9 
; 0000 00FA 
; 0000 00FB         for( i=0 ; i < strlen(name) ; i++)
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;	*name -> Y+0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 00FC         {
; 0000 00FD             lcd_gotoxy(x,y);
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 00FE             lcd_putchar(name[i]);
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 00FF             updatePos(1);
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 0100             putchar2(name[i]);
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 0101         }
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 0102 
; 0000 0103       }
;PCODE: $000000D4 VOL: 0
; 0000 0104       else if (b == 8)
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 0105       {
; 0000 0106         putchar2(8);
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 0107         putchar2(32);
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 0108         putchar2(8);
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 0109 
; 0000 010A         updatePos(0);
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0000 010B         lcd_gotoxy(x,y);
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 010C         updatePos(1);
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0000 010D         lcd_putchar(32);
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 010E         updatePos(0);
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0000 010F 
; 0000 0110 
; 0000 0111       }
; 0000 0112       else
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0000 0113       {     lcd_gotoxy(x,y);
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 0114             lcd_putchar(b);
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 0115             updatePos(1);
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0000 0116             putchar2(b);
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0000 0117 
; 0000 0118       }
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 0119 
; 0000 011A 
; 0000 011B       }
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0000 011C }
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0

	.DSEG
_0x1B:
	.BYTE 0xD
