;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.3 Standard
;Automatic Program Generator
;© Copyright 1998-2011 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 3/12/2019
;Author  : admin
;Company : IUST
;Comments:
;
;
;Chip type               : ATmega1280
;Program type            : Application
;AVR Core Clock frequency: 11.059200 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 2048
;*****************************************************/
;
;#include <mega1280.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;unsigned int counter = 0;
;int numbers[] = {0,0,0,0};
;int turn = 0;
;unsigned char segments[] = {0XEB,0X88,0XB3,0XBA,0XD8,0X7A,0X7B,0XA8,0XFB,0XFA};

	.DSEG
;
;// Timer 0 output compare A interrupt service routine
;interrupt [TIM0_COMPA] void timer0_compa_isr(void)
; 0000 0021 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0022     if (turn == 0){
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0023         PORTK = segments[numbers[0]];
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0024         PORTF = 0x80;
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0025         }
; 0000 0026     if (turn == 1){
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0027         PORTK = segments[numbers[1]];
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0028         PORTF = 0x40;
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0029         }
; 0000 002A     if (turn == 2){
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 002B         PORTK = segments[numbers[2]] | 0x04 ;
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 002C         PORTF = 0x20;
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 002D         }
; 0000 002E     if (turn == 3){
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 002F         PORTK = segments[numbers[3]];
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0030         PORTF = 0x10;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0031         }
; 0000 0032     turn ++;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0033     if (turn == 4){
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0034         turn = 0;
;PCODE: $00000040 VOL: 0
; 0000 0035     }
; 0000 0036 
; 0000 0037 }
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;
;interrupt [TIM1_COMPA] void timer1_compa_isr(void)
; 0000 003A {
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 003B     numbers[0]++;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 003C     if(numbers[0] == 10){
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 003D         numbers[1]++;
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 003E         numbers[0] = 0;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 003F     }
; 0000 0040 
; 0000 0041     if(numbers[1] == 6){
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0042         numbers[2]++;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0043         numbers[1] = 0;
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 0044     }
; 0000 0045 
; 0000 0046     if(numbers[2] == 10){
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 0047         numbers[3]++;
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0048         numbers[2] = 0;
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 0049     }
; 0000 004A 
; 0000 004B     if(numbers[3] == 6){
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 004C         numbers[3] = 0;
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 004D     }
; 0000 004E 
; 0000 004F }
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;
;// Declare your global variables here
;
;void main(void)
; 0000 0054 {
;PCODE: $0000007E VOL: 0
; 0000 0055 // Declare your local variables here
; 0000 0056 
; 0000 0057 // Crystal Oscillator division factor: 1
; 0000 0058 #pragma optsize-
; 0000 0059 CLKPR=0x80;
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 005A CLKPR=0x00;
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 005B #ifdef _OPTIMIZE_SIZE_
; 0000 005C #pragma optsize+
; 0000 005D #endif
; 0000 005E 
; 0000 005F 
; 0000 0060 
; 0000 0061 
; 0000 0062 
; 0000 0063 // Port F initialization
; 0000 0064 // Func7=Out Func6=Out Func5=Out Func4=Out Func3=In Func2=In Func1=In Func0=In
; 0000 0065 // State7=0 State6=0 State5=0 State4=0 State3=T State2=T State1=T State0=T
; 0000 0066 PORTF=0x00;
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 0067 DDRF=0xF0;
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 0068 
; 0000 0069 // Port K initialization
; 0000 006A // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
; 0000 006B // State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=0 State0=0
; 0000 006C PORTK=0x00;
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 006D DDRK=0xFF;
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 006E 
; 0000 006F 
; 0000 0070 // Timer/Counter 0 initialization
; 0000 0071 // Clock source: System Clock
; 0000 0072 // Clock value: 10.800 kHz
; 0000 0073 // Mode: CTC top=OCR0A
; 0000 0074 // OC0A output: Disconnected
; 0000 0075 // OC0B output: Disconnected
; 0000 0076 TCCR0A=0x02;
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 0077 TCCR0B=0x05;
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 0078 TCNT0=0x00;
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 0079 OCR0A=0x16;
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 007A OCR0B=0x00;
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 007B 
; 0000 007C // Timer/Counter 1 initialization
; 0000 007D // Clock source: System Clock
; 0000 007E // Clock value: 10.800 kHz
; 0000 007F // Mode: CTC top=OCR1A
; 0000 0080 // OC1A output: Discon.
; 0000 0081 // OC1B output: Discon.
; 0000 0082 // OC1C output: Discon.
; 0000 0083 // Noise Canceler: Off
; 0000 0084 // Input Capture on Falling Edge
; 0000 0085 // Timer1 Overflow Interrupt: Off
; 0000 0086 // Input Capture Interrupt: Off
; 0000 0087 // Compare A Match Interrupt: Off
; 0000 0088 // Compare B Match Interrupt: Off
; 0000 0089 // Compare C Match Interrupt: Off
; 0000 008A TCCR1A=0x00;
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 008B TCCR1B=0x0D;
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 008C TCNT1H=0x00;
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 008D TCNT1L=0x00;
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 008E ICR1H=0x00;
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 008F ICR1L=0x00;
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 0090 OCR1AH=0x2A;
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 0091 OCR1AL=0x30;
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 0092 OCR1BH=0x00;
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 0093 OCR1BL=0x00;
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 0094 OCR1CH=0x00;
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 0095 OCR1CL=0x00;
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 0096 
; 0000 0097 // Timer/Counter 0 Interrupt(s) initialization
; 0000 0098 TIMSK0=0x02;
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 0099 
; 0000 009A // Timer/Counter 1 Interrupt(s) initialization
; 0000 009B TIMSK1=0x02;
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 009C 
; 0000 009D // Global enable interrupts
; 0000 009E #asm("sei")
;PCODE: $000000B1 VOL: 0
	sei
;PCODE: $000000B2 VOL: 0
; 0000 009F 
; 0000 00A0 while (1)
;PCODE: $000000B3 VOL: 0
; 0000 00A1       {
; 0000 00A2       // Place your code here
; 0000 00A3 
; 0000 00A4       }
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 00A5 }
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
