;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.3 Standard
;Automatic Program Generator
;© Copyright 1998-2011 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 3/12/2019
;Author  : admin
;Company : IUST
;Comments:
;
;
;Chip type               : ATmega1280
;Program type            : Application
;AVR Core Clock frequency: 11.059200 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 2048
;*****************************************************/
;
;#include <mega1280.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;
;// Declare your global variables here
;
;unsigned int counter = 0;
;int res = 0;
;unsigned char segments[] = {0XEB,0X88,0XB3,0XBA,0XD8,0X7A,0X7B,0XA8,0XFB,0XFA};

	.DSEG
;
;
;void main(void)
; 0000 0023 {

	.CSEG
;PCODE: $0000000D VOL: 0
; 0000 0024 // Declare your local variables here
; 0000 0025 
; 0000 0026 // Crystal Oscillator division factor: 1
; 0000 0027 #pragma optsize-
; 0000 0028 CLKPR=0x80;
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
; 0000 0029 CLKPR=0x00;
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 002A #ifdef _OPTIMIZE_SIZE_
; 0000 002B #pragma optsize+
; 0000 002C #endif
; 0000 002D 
; 0000 002E 
; 0000 002F // Port F initialization
; 0000 0030 // Func7=Out Func6=Out Func5=Out Func4=Out Func3=In Func2=In Func1=In Func0=In
; 0000 0031 // State7=0 State6=0 State5=0 State4=0 State3=T State2=T State1=T State0=T
; 0000 0032 PORTF=0x00;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0033 DDRF=0xF0;
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0034 
; 0000 0035 
; 0000 0036 
; 0000 0037 
; 0000 0038 // Port K initialization
; 0000 0039 // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
; 0000 003A // State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=0 State0=0
; 0000 003B PORTK=0x00;
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 003C DDRK=0xFF;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 003D 
; 0000 003E 
; 0000 003F 
; 0000 0040 
; 0000 0041 while (1)
;PCODE: $0000001A VOL: 0
; 0000 0042       {
; 0000 0043         PORTK = segments[counter%10];
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0044         PORTF = 0x80;
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0045         delay_ms(5);
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0046 
; 0000 0047         PORTK = segments[(counter/10)%10];
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0048         PORTF = 0x40;
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0049         delay_ms(5);
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 004A 
; 0000 004B         PORTK = segments[(counter/100)%10];
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 004C         PORTF = 0x20;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 004D         delay_ms(5);
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 004E 
; 0000 004F         PORTK = segments[(counter/1000)%10];
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0050         PORTF = 0x10;
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0051         delay_ms(5);
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0052         if (res == 60){
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0053             res = 0;
;PCODE: $00000053 VOL: 0
; 0000 0054             counter++;
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0055             }
; 0000 0056         res++;
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0057 
; 0000 0058 
; 0000 0059 
; 0000 005A 
; 0000 005B       }
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 005C }
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
