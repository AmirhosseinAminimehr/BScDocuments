;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.3 Standard
;Automatic Program Generator
;© Copyright 1998-2011 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 5/21/2019
;Author  : admin
;Company : IUST
;Comments:
;
;
;Chip type               : ATmega32
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*****************************************************/
;
;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;
;// Declare your global variables here
;
;/*
;    Matrix Coder by Fattah-Tafreshi
;    VAF-O-T
;    2011
;    Email:fattah.roland@gmail.com
;
;    Code For C & C++
;    Display: X=40  Y=8
;    Text: ABCDEF
;    Font: Tahoma
;    Size: 7
;
;    5/21/2019 5:13:36 PM
;*/
;
;const unsigned char Code[]=
;{
;    0x70,    //    .###....
;    0x1C,    //    ...###..
;    0x13,    //    ...#..##
;    0x13,    //    ...#..##
;    0x1C,    //    ...###..
;    0x70,    //    .###....
;    0x00,    //    ........
;    0x7F,    //    .#######
;    0x49,    //    .#..#..#
;    0x49,    //    .#..#..#
;    0x4E,    //    .#..###.
;    0x30,    //    ..##....
;    0x00,    //    ........
;    0x1C,    //    ...###..
;    0x22,    //    ..#...#.
;    0x41,    //    .#.....#
;    0x41,    //    .#.....#
;    0x41,    //    .#.....#
;    0x22,    //    ..#...#.
;    0x00,    //    ........
;    0x7F,    //    .#######
;    0x41,    //    .#.....#
;    0x41,    //    .#.....#
;    0x41,    //    .#.....#
;    0x22,    //    ..#...#.
;    0x1C,    //    ...###..
;    0x00,    //    ........
;    0x7F,    //    .#######
;    0x49,    //    .#..#..#
;    0x49,    //    .#..#..#
;    0x49,    //    .#..#..#
;    0x41,    //    .#.....#
;    0x00,    //    ........
;    0x7F,    //    .#######
;    0x09,    //    ....#..#
;    0x09,    //    ....#..#
;    0x09,    //    ....#..#
;    0x01,    //    .......#
;    0x00,    //    ........
;    0x00,    //    ........
;    0x00,    //    ........
;    0x00,    //    ........
;    0x00     //    ........
;};

	.DSEG
;
;int i=0;
;int base = 0;
;int counter = 0;
;
;void main(void)
; 0000 0060 {

	.CSEG
;PCODE: $0000000D VOL: 0
; 0000 0061 // Declare your local variables here
; 0000 0062 
; 0000 0063 // Input/Output Ports initialization
; 0000 0064 // Port A initialization
; 0000 0065 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0066 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0067 PORTA=0x00;
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
; 0000 0068 DDRA=0x00;
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0069 
; 0000 006A // Port B initialization
; 0000 006B // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 006C // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 006D PORTB=0x00;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 006E DDRB=0x00;
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 006F 
; 0000 0070 // Port C initialization
; 0000 0071 // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
; 0000 0072 // State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=0 State0=0
; 0000 0073 PORTC=0x00;
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0074 DDRC=0xFF;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 0075 
; 0000 0076 // Port D initialization
; 0000 0077 // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
; 0000 0078 // State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=0 State0=0
; 0000 0079 PORTD=0x00;
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 007A DDRD=0xFF;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 007B 
; 0000 007C while (1)
;PCODE: $0000001E VOL: 0
; 0000 007D       {        while(counter < 5) {
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 007E                 PORTD = 0x01;
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 007F                 for(i=0; i< 8; i++){
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 0080                     PORTC = ~Code[base + i];
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0081                     delay_ms(5);
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0082                     PORTD = PORTD*2;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0083                 }
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0084                 counter++;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0085                 }
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0086             base++;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0087             delay_ms(20);
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0088             if (base > 44)
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0089                 base = 0;
;PCODE: $0000004E VOL: 0
; 0000 008A             counter = 0;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 008B 
; 0000 008C       }
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 008D }
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
