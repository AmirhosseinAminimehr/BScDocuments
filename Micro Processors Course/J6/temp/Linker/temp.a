;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.3 Standard
;Automatic Program Generator
;© Copyright 1998-2011 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 4/16/2019
;Author  : admin
;Company : IUST
;Comments:
;
;
;Chip type               : ATmega1280
;Program type            : Application
;AVR Core Clock frequency: 11.059200 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 2048
;*****************************************************/
;
;#include <mega1280.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;#include <delay.h>
;#include <stdlib.h>
;
;// Alphanumeric LCD functions
;#include <alcd.h>
;
;#define ADC_VREF_TYPE 0x00
;
;int temp;
;char text[3];
;// Read the AD conversion result
;unsigned int read_adc(unsigned char adc_input)
; 0000 0026 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0027 ADMUX=(adc_input & 0x1f) | (ADC_VREF_TYPE & 0xff);
;PCODE: $0000000F VOL: 0
;	adc_input -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0028 if (adc_input & 0x20) ADCSRB |= 0x08;
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 0029 else ADCSRB &= 0xf7;
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 002A // Delay needed for the stabilization of the ADC input voltage
; 0000 002B delay_us(10);
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 002C // Start the AD conversion
; 0000 002D ADCSRA|=0x40;
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 002E // Wait for the AD conversion to complete
; 0000 002F while ((ADCSRA & 0x10)==0);
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0030 ADCSRA|=0x10;
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0031 return ADCW;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 0032 }
;PCODE: $00000030 VOL: 0
;
;// Declare your global variables here
;
;void main(void)
; 0000 0037 {
;PCODE: $00000031 VOL: 0
; 0000 0038 // Declare your local variables here
; 0000 0039 
; 0000 003A // Crystal Oscillator division factor: 1
; 0000 003B #pragma optsize-
; 0000 003C CLKPR=0x80;
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 003D CLKPR=0x00;
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 003E #ifdef _OPTIMIZE_SIZE_
; 0000 003F #pragma optsize+
; 0000 0040 #endif
; 0000 0041 
; 0000 0042 // Input/Output Ports initialization
; 0000 0043 // Port A initialization
; 0000 0044 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0045 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0046 PORTA=0x00;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0047 DDRA=0x00;
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0048 
; 0000 0049 // Port B initialization
; 0000 004A // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 004B // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 004C PORTB=0x00;
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 004D DDRB=0x00;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 004E 
; 0000 004F // Port C initialization
; 0000 0050 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0051 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0052 PORTC=0x00;
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0053 DDRC=0x00;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 0054 
; 0000 0055 // Port D initialization
; 0000 0056 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0057 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0058 PORTD=0x00;
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0059 DDRD=0x00;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 005A 
; 0000 005B // Port E initialization
; 0000 005C // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 005D // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 005E PORTE=0x00;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 005F DDRE=0x00;
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0060 
; 0000 0061 // Port F initialization
; 0000 0062 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0063 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0064 PORTF=0x00;
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0065 DDRF=0x00;
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0066 
; 0000 0067 // Port G initialization
; 0000 0068 // Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0069 // State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 006A PORTG=0x00;
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 006B DDRG=0x00;
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 006C 
; 0000 006D // Port H initialization
; 0000 006E // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 006F // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0070 PORTH=0x00;
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 0071 DDRH=0x00;
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0072 
; 0000 0073 // Port J initialization
; 0000 0074 // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
; 0000 0075 // State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=0 State0=0
; 0000 0076 PORTJ=0x00;
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 0077 DDRJ=0xFF;
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0078 
; 0000 0079 // Port K initialization
; 0000 007A // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 007B // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 007C PORTK=0x00;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 007D DDRK=0x00;
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 007E 
; 0000 007F // Port L initialization
; 0000 0080 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0081 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0082 PORTL=0x00;
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0083 DDRL=0x00;
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 0084 
; 0000 0085 // ADC initialization
; 0000 0086 // ADC Clock frequency: 691.200 kHz
; 0000 0087 // ADC Voltage Reference: AREF pin
; 0000 0088 // ADC Auto Trigger Source: ADC Stopped
; 0000 0089 // Digital input buffers on ADC0: On, ADC1: On, ADC2: On, ADC3: On
; 0000 008A // ADC4: On, ADC5: On, ADC6: On, ADC7: On
; 0000 008B DIDR0=0x00;
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 008C // Digital input buffers on ADC8: On, ADC9: On, ADC10: On, ADC11: On
; 0000 008D // ADC12: On, ADC13: On, ADC14: On, ADC15: On
; 0000 008E DIDR2=0x00;
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 008F ADMUX=ADC_VREF_TYPE & 0xff;
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 0090 ADCSRA=0x84;
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0091 
; 0000 0092 // Alphanumeric LCD initialization
; 0000 0093 // Connections are specified in the
; 0000 0094 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 0095 // RS - PORTA Bit 0
; 0000 0096 // RD - PORTA Bit 1
; 0000 0097 // EN - PORTA Bit 2
; 0000 0098 // D4 - PORTA Bit 4
; 0000 0099 // D5 - PORTA Bit 5
; 0000 009A // D6 - PORTA Bit 6
; 0000 009B // D7 - PORTA Bit 7
; 0000 009C // Characters/line: 16
; 0000 009D lcd_init(16);
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 009E 
; 0000 009F lcd_clear();
;PCODE: $0000006C VOL: 0
; 0000 00A0 while (1)
;PCODE: $0000006D VOL: 0
; 0000 00A1       {
; 0000 00A2         lcd_gotoxy(6, 0);
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 00A3         temp = read_adc(2);
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 00A4         temp = temp * 4.8898 / 10;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 00A5         itoa(temp, text);
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 00A6         lcd_puts(text);
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 00A7         lcd_puts("  ");
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 00A8       }
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 00A9 }
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0

	.DSEG
_0xB:
	.BYTE 0x3
